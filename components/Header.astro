---

import Account from "./Account.astro";
import Dropdown, { type Props as DropdownProps } from "./Dropdown.astro";
import DropdownItem, { type Props as DropdownItemProps } from "./DropdownItem.astro";
import Button from "./Button.astro";

type HeaderLink = {
    type: "link";
    label: string;
    href: string;
    external?: boolean;
}
type HeaderDropdown = DropdownProps & {
    type: "dropdown";
    items: DropdownItemProps[];
}

type HeaderItem = HeaderLink | HeaderDropdown;

export interface Props {
    title: string;
    items: HeaderItem[];
}
const { title, items } = Astro.props as Props;

---

<header id="header" class="flex v-center gap-200">
    <div class="logo">
        <img src="https://resources.infinlabs.org/assets/logo.png" alt="InfinLabs Logo">
    </div>
    <nav>
        <ul class="nav-links | flex gap-300">
            {items.map(item => {
                if (item.type === "link") {
                    return <li class="nav-item">
                        <a class="nav-link" href={item.href} target={item.external ? "_blank" : undefined}>
                            <span>{item.label}</span>
                            {item.external && <i class="bx bx-link-external" aria-label="External link"></i>}
                        </a>
                    </li>
                } else if (item.type === "dropdown") {
                    return <li class="nav-item">
                        <Dropdown id={item.id} label={item.label} label_type={item.label_type} label_class="nav-link">
                            {item.items.map(x => {
                                return <DropdownItem {...x} />
                            })}
                        </Dropdown>
                    </li>
                }
            })}
        </ul>
        <div class="mobile-menu-toggle" id="mobile-menu">
            <i class='bx bx-menu'></i>
        </div>
    </nav>
    <div class="get-started">
		<Button theme="cta" href="https://lab.infinlabs.org" text="Get Started" />
        <!-- <Account /> -->
    </div>
</header>

<style>

    header {
		padding: 1.5rem 3rem;
		position: fixed;
		z-index: 100;
		width: 100%;
		transition: background-color 0.3s ease;

		@media (width > 768px) {
			justify-content: space-between;
		}
	}

	header.scrolled {
		background-color: hsla(var(--bc-clr-bg-body-hsl), 0.9);
		backdrop-filter: blur(10px);
		box-shadow: 0 4px 30px rgba(0, 0, 0, 0.1);
	}

	img {
		height: 6.6rem;
	}

	nav ul {
		margin: 0;
		list-style: none;
	}

	nav a {
		position: relative;
		font-size: var(--bc-fs-400);
		transition: .3s ease;
	}

	nav a:is(:hover, :focus-visible) {
        text-decoration: none;
		color: var(--bc-clr-primary-400);
	}

	nav a::after {
		content: '';
		background: var(--bc-grad-primary);
		position: absolute;
		bottom: -5px;
		left: 0;
		width: 0;
		height: 2px;
		transition: .3s ease;
	}

	nav a:is(:hover, :focus-visible)::after {
		width: 100%;
	}

    .mobile-menu-toggle {
        display: none;
        font-size: 2rem;
        cursor: pointer;
    }


    @media (max-width: 768px) {
		header {
			padding: 1rem 2rem;
		}

		img {
			height: 4.6rem;
		}

		.nav-links {
			background: rgba(0,0,0,0.7);
			backdrop-filter: blur(4px);
			position: fixed;
			top: 0;
			right: -100%;
			z-index: 100;
			flex-direction: column;
			align-items: end;
			width: 20rem;
			height: 100vh;
			transition: .3s ease;
			
		}

		.nav-links.active {
			right: 0;
		}

		.mobile-menu-toggle {
			display: block;
			z-index: 101;
		}

		.get-started {
			margin-left: auto;
		}
	}
</style>


<script>
	const header = document.querySelector("#header") as HTMLElement;
	window.addEventListener("scroll", () => {
		if (window.scrollY > 50) {
			header.classList.add("scrolled");
		} else {
			header.classList.remove("scrolled");
		}
	});

	const mobileMenu = document.querySelector("#mobile-menu") as HTMLElement;
	const navLinks = document.querySelector(".nav-links") as HTMLElement;
	
	mobileMenu.addEventListener("click", () => {
		navLinks.classList.toggle("active");
		if (navLinks.classList.contains("active")) {
			mobileMenu.innerHTML = '<i class="bx bx-x"></i>';
		} else {
			mobileMenu.innerHTML = '<i class="bx bx-menu"></i>';
		}
	});

	document.addEventListener("click", e => {
		const target = e.target as HTMLElement;
		if (!target.closest(".nav-links") && !target.closest(".mobile-menu-toggle")) {
			navLinks.classList.remove("active");
		}
	});
</script>